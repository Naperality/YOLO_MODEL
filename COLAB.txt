🎲 YOLOv8 Dice Recognition — Google Colab Template

# ============================
# 🚀 Step 1: Setup Environment
# ============================
!pip install ultralytics==8.0.196
from ultralytics import YOLO
import torch, os

print("✅ Torch version:", torch.__version__)
print("✅ GPU available:", torch.cuda.is_available())


# ============================
# 📂 Step 2: Mount Google Drive
# ============================
from google.colab import drive
drive.mount('/content/drive')

# Define your project path in Google Drive
PROJECT_PATH = "/content/drive/MyDrive/YOLO_Dice"
os.makedirs(PROJECT_PATH, exist_ok=True)
print("📂 Project path set to:", PROJECT_PATH)


# ============================
# 📦 Step 3: Prepare Dataset
# ============================
# 🔹 Put your Roboflow-exported dataset ZIP into Google Drive, e.g.:
# /content/drive/MyDrive/YOLO_Dice/dice_dataset.zip
# Make sure it’s in YOLOv8 format!

DATASET_ZIP = "/content/drive/MyDrive/YOLO_Dice/dice_dataset.zip"
DATASET_PATH = "/content/dice_dataset"

!unzip -qo {DATASET_ZIP} -d /content/
print("✅ Dataset unzipped at:", DATASET_PATH)

# Check dataset.yaml exists
!cat {DATASET_PATH}/data.yaml


# ============================
# 🏋️ Step 4: Train YOLOv8 Model
# ============================
model = YOLO("yolov8n.pt")  # you can switch to yolov8s/m/l for bigger models

results = model.train(
    data=f"{DATASET_PATH}/data.yaml",  # Roboflow data.yaml
    epochs=50,
    imgsz=640,
    batch=16,
    project=PROJECT_PATH,
    name="yolov8n_dice",
    device=0
)

# ============================
# 📊 Step 5: Evaluate Model
# ============================
metrics = model.val()
print("✅ Evaluation metrics:", metrics)


# ============================
# 🔍 Step 6: Inference (Test on Sample Images)
# ============================
# You can test with images from your dataset or upload new ones
TEST_IMAGE = f"{DATASET_PATH}/test/images/sample.jpg"  # change to one of your test images

results = model.predict(
    source=TEST_IMAGE,
    conf=0.5,
    show=True
)

# Save prediction output
results[0].save(filename="/content/dice_prediction.jpg")

# ============================
# 💾 Step 7: Export Trained Model
# ============================
# Copy best weights to Google Drive
!cp {PROJECT_PATH}/yolov8n_dice/weights/best.pt {PROJECT_PATH}/best.pt
print("✅ Model saved to Google Drive:", PROJECT_PATH + "/best.pt")

# ============================
# 💾 Step 8: Export Trained Model in Different Format
# ============================
# Export your trained model to different formats:
model.export(format="onnx")

